kernel void init_vec_norm(global float* restrict in, global const float* restrict rand_values, const int nels, 
    const float mu, const float sigma){

    const int i = get_global_id(0) ; 

    const float x1 = rand_values[i] ; 
    const float x2 = (i == nels -1) ? rand_values[0] : rand_values[i] ; 

    const float n1 = cos(2*3.14*x2)*sqrt(-2.*log(x1)) ;
    in[i] = sigma*n1 + mu ;  
}

kernel void init_vec_uniform(global float* restrict in, global const float* restrict rand_values, const int nels, 
    const float start, const float end){

    const int i = get_global_id(0) ; 

    const float x1 = rand_values[i] ; 
    in[i] = x1*(end - start) + start ; 
}


kernel void split_elements(const int nels, const int sstart, global const float * restrict in,  
const float pivot, global int* bit_array_sup, global int* bit_array_inf
){
    int i = get_global_id(0) ; 
    const int gs = get_global_size(0) ;  

    while(i < nels){
        float v = in[sstart + i] ;

        if(v < pivot){
            bit_array_inf[i] = 1 ;
            bit_array_sup[i] = 0 ;  
        }
        else if(v > pivot){
            bit_array_sup[i] = 1 ;
            bit_array_inf[i] = 0 ;  
        } 
        else{
            bit_array_sup[i] = 0 ; 
            bit_array_inf[i] = 0 ;  
        }
        i += gs ;
    }
}

kernel void scan(const int nels, global int* restrict bit_map_sup, global int* restrict bit_map_inf, 
global int* restrict tails_inf, global int* restrict tails_sup){
    const int gi = get_group_id(0) ; 
    const int nwg = get_num_groups(0) ; 
    const int nels_nwg = (nels + nwg -1)/nwg ; 
    const int start = gi*nels_nwg ; 
    const int end = min(start + nels_nwg, nels) ; 

    int acc_sup = 0 ; 
    int acc_inf = 0 ; 

    int curr_sup = 0 ; 
    int curr_inf = 0 ; 
    for(int i = start ; i < end ; i++){
        curr_sup = bit_map_sup[i] ;  
        curr_inf = bit_map_inf[i] ; 
        acc_sup+= curr_sup ;
        acc_inf+= curr_inf ; 
        if(bit_map_sup != tails_sup){
            bit_map_sup[i] = acc_sup - curr_sup;
            bit_map_inf[i] = acc_inf - curr_inf;  
        }
        else{
            bit_map_sup[i] = acc_sup ;
            bit_map_inf[i] = acc_inf ;  
        } 
    }

    if(tails_inf != bit_map_inf){
        tails_sup[get_group_id(0)] = acc_sup ; 
        tails_inf[get_group_id(0)] = acc_inf ;  
    }
}

kernel void scan_update(const int nels, global int* restrict bit_map_sup, global int* restrict bit_map_inf, 
global int* restrict tails_sup, global int* restrict tails_inf){

    const int nwg = get_num_groups(0) + 1 ; 
    const int nels_nwg = (nels + nwg - 1)/nwg ; 
    const int li = get_local_id(0) ; 
    const int start = (get_group_id(0) + 1)*nels_nwg ; 
    const int end = min(start  + nels_nwg, nels) ; 
    const int gi = get_group_id(0) ; 

    const int corr_sup = tails_sup[gi] ; 
    const int corr_inf = tails_inf[gi] ; 

    for(int j=start + li; j < end ; j+=get_local_size(0)){
        bit_map_sup[j] += corr_sup ; 
        bit_map_inf[j] += corr_inf ; 
    } 
}

kernel void partition(const int nels, const int sstart, const float pivot_value, const int lt, const int gt, global float* restrict in, global float* restrict out, 
global const int* restrict bit_map_sup, global const int* restrict bit_map_inf){

   int i = get_global_id(0) ; 
   const int send = sstart + nels - 1 ; 

    while(i < nels){
        const float v = in[i + sstart] ;

        if(v < pivot_value){
            const int idx_out = sstart + bit_map_inf[i] ; 
            out[idx_out] =  v ; 
        }

        if(v > pivot_value){
            const int idx_out = bit_map_sup[i]  + send - gt + 1 ; 
            out[idx_out] = v ;   
        }

        i+=get_global_size(0) ; 
    }

    if(get_group_id(0) == 0 && get_local_id(0) == 0){
        for(int j = sstart + lt ; j < send - gt + 1; j++){
            out[j]= pivot_value ; 
        }
    }   
}

kernel void partition_copy(const int nels, const int sstart, global float* restrict in, global float* restrict out){

    int i =  get_global_id(0) ; 

    while(i < nels){
        float v = out[i + sstart] ; 
        in[i + sstart] = v ; 
        i+=get_global_size(0) ; 
    }  
}