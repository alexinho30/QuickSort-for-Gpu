#define QUEUE_SIZE 2048

typedef struct{
    int sstart ; 
    int send ; 
    float pivot_value; 
}sequence ; 

kernel void init_vec_norm(global float* restrict in, global const float* restrict rand_values, const int nels, 
    const float mu, const float sigma){

    const int i = get_global_id(0) ; 

    if(i < nels){
        const float x1 = rand_values[i] ; 
        const float x2 = (i == nels -1) ? rand_values[0] : rand_values[i] ;
        const float n1 = cos(2*3.14*x2)*sqrt(-2.*log(x1)) ;
        in[i] = sigma*n1 + mu ;  
    }
}

kernel void init_vec_uniform(global float* restrict in, global const float* restrict rand_values, const int nels, 
    const float start, const float end){

    const int i = get_global_id(0) ; 

    if(i < nels){
        const float x1 = rand_values[i] ; 
        in[i] = x1*(end - start) + start ; 
    }
} 

kernel void split_elements(const int nels, const int sstart, global const float * restrict in,  
const float pivot, global int* bit_array_sup, global int* bit_array_inf
){
    int i = get_global_id(0) ; 
    const int gs = get_global_size(0) ;  

    while(i < nels){
        float v = in[sstart + i] ;

        if(v < pivot){
            bit_array_inf[i] = 1 ;
            bit_array_sup[i] = 0 ;  
        }
        else if(v > pivot){ 
            bit_array_sup[i] = 1 ;
            bit_array_inf[i] = 0 ;  
        } 
        else{
            bit_array_sup[i] = 0 ; 
            bit_array_inf[i] = 0 ;  
        }

        i += gs ;
    }
}

kernel void split_elements_vect_4(const int nels, const int sstart, global const float4 * restrict in,  
const float pivot, global int* bit_array_sup, global int* bit_array_inf){
    const int li = get_local_id(0) ; 
    const int gi = get_group_id(0) ;
    const int gs = get_global_size(0) ; 
    int i = get_global_id(0) ;

    const int send = nels + sstart - 1; 
    const int left_offset = ((sstart/4)*4) ; 
    const int right_offset = (((send +1)/4)*4 == send + 1) ? send : ((send + 4)/4)*4 - 1 ; 
    const int nquarts  = (right_offset - left_offset + 1)/4 ;  

    int v_sup = 0 ;
    int v_inf = 0 ;
    float s[4] ; 

    while(i < nquarts){

        float4 v = in[left_offset/4 + i] ;

        float s[4] = {v.s0, v.s1, v.s2, v.s3} ; 

        const int start_offset = (i == 0) ? (sstart - left_offset) : 0 ; 
        const int end_offset = (i == nquarts - 1) ? 4 - (right_offset - send) : 4 ; 
        
        #pragma unroll
        for(int t = start_offset; t < end_offset ; t++){
            const int idx = i*4 + t - (sstart - left_offset); 

            if(s[t] < pivot){
                bit_array_inf[idx] = 1 ;  
                bit_array_sup[idx] = 0 ;  
            }
            else if(s[t] > pivot){
                bit_array_sup[idx] = 1 ;
                bit_array_inf[idx] = 0 ;  
            } 
            else{
                bit_array_sup[idx] = 0 ; 
                bit_array_inf[idx] = 0 ;  
            }
        }
        i += gs ;
    }
}

kernel void scan(const int nels, global int4* restrict bit_map_sup, global int4* restrict bit_map_inf, 
global int* restrict tails_inf, global int* restrict tails_sup, local int* restrict lmem_sup, local int* lmem_inf){

    const int nquarts = (nels+3)/4 ; 
    const int gi = get_group_id(0) ; 
    const int nquarts_nwg = (nquarts + get_num_groups(0) - 1)/get_num_groups(0) ;
    const int li = get_local_id(0) ; 

    int start = gi*nquarts_nwg ;
    int tail_inf = 0, tail_sup = 0 ;  
    const int end = min(start + nquarts_nwg, nquarts) ; 

    if(!(nels & 3) && end == nquarts && li == 0){
        const int offset = 4 - (nels%4) ; 
        int4 v = bit_map_inf[nquarts - 1] ; 
        int4 v1 = bit_map_sup[nquarts - 1] ; 

        switch(offset){
            case 1 :
                bit_map_inf[nquarts - 1] = (int4)(v.s0, 0, 0, 0) ; 
                bit_map_sup[nquarts - 1] = (int4)(v1.s0, 0, 0, 0) ;
                break ; 
            case 2 :
                bit_map_inf[nquarts - 1] = (int4)(v.s0, v.s1, 0, 0) ; 
                bit_map_sup[nquarts - 1] = (int4)(v1.s0, v1.s1, 0, 0) ;
                break ; 
            case 3 :
                bit_map_inf[nquarts - 1] = (int4)(v.s0, v.s1, v.s2, 0) ; 
                bit_map_sup[nquarts - 1] = (int4)(v1.s0, v1.s1, v1.s2, 0) ;
                break ; 
        } 
    }

    while(start < end){
        barrier(CLK_LOCAL_MEM_FENCE) ; 

        int4 acc4_sup = (int4)0 ;
        int4 acc4_inf = (int4)0 ;  

        int i = start + li ; 

        int4 exclusive_sup = (int4)0; 
        int4 exclusive_inf = (int4)0; 

        if(i < end){
            acc4_sup = bit_map_sup[i] ;
            acc4_inf = bit_map_inf[i] ; 

            exclusive_inf = acc4_inf ; 
            exclusive_sup = acc4_sup ;

            acc4_sup.odd += acc4_sup.even ; 
            acc4_inf.odd += acc4_inf.even ; 

            acc4_sup.hi += acc4_sup.s1 ; 
            acc4_inf.hi += acc4_inf.s1 ; 
        }

        int acc_inf = acc4_inf.s3 ; 
        int acc_sup = acc4_sup.s3 ; 

        lmem_inf[li] = acc_inf ;
        lmem_sup[li] = acc_sup ; 

        int div = 1 ; 
        int curr_idx = li ; 

        while(div < get_local_size(0)){
            int offset = div - 1 ; 
            int next_idx = curr_idx/2 ;
            barrier(CLK_LOCAL_MEM_FENCE) ;  
            if(curr_idx & 1){
                acc_sup += lmem_sup[next_idx*2*div + offset] ; 
                acc_inf += lmem_inf[next_idx*2*div + offset] ; 
                lmem_inf[li] = acc_inf ; 
                lmem_sup[li] = acc_sup ; 
            } 
            curr_idx = next_idx ;
            div*=2 ;  
        }        

        barrier(CLK_LOCAL_MEM_FENCE) ; 

        if(i < end){
            const int local_tail_inf = (li == 0)? 0 : lmem_inf[li - 1] ; 
            const int local_tail_sup = (li == 0)? 0 : lmem_sup[li - 1] ;

            if(tails_inf != bit_map_inf){
                bit_map_inf[i] = acc4_inf + tail_inf + local_tail_inf - exclusive_inf; 
                bit_map_sup[i] = acc4_sup + tail_sup + local_tail_sup - exclusive_sup;
            }
            else{
                bit_map_inf[i] = acc4_inf + tail_inf + local_tail_inf ; 
                bit_map_sup[i] =  acc4_sup + tail_sup + local_tail_sup ;
            }
        }

        start+=get_local_size(0) ; 

        barrier(CLK_LOCAL_MEM_FENCE) ; 
        tail_inf += lmem_inf[get_local_size(0) - 1] ; 
        tail_sup += lmem_sup[get_local_size(0) - 1] ; 
    }

    if(li == 0 && tails_inf != bit_map_inf){
        tails_inf[gi] = tail_inf ; 
        tails_sup[gi] = tail_sup ;   
    }
}



kernel void scan_update(const int nels, global int4* restrict bit_map_sup, global int4* restrict bit_map_inf, 
global int* restrict tails_sup, global int* restrict tails_inf){

    const int nquarts = nels/4 ; 

    const int nwg = get_num_groups(0) + 1 ; 
    const int nquarts_nwg = (nquarts + nwg - 1)/nwg ; 
    const int start = (get_group_id(0) + 1)*nquarts_nwg ; 
    const int end = min(start + nquarts_nwg, nquarts) ; 
    const int gi = get_group_id(0) ; 

    const int corr_sup = tails_sup[gi] ; 
    const int corr_inf = tails_inf[gi] ; 

    const int li = get_local_id(0) ; 

    #pragma unroll
    for(int j=start + li; j < end ; j+=get_local_size(0)){
        bit_map_sup[j] += corr_sup ; 
        bit_map_inf[j] += corr_inf ; 
    } 
}

kernel void partition(const int nels, const int sstart, const float pivot_value, global float* restrict in, global float* restrict out, 
global const int* restrict bit_map_sup, global const int* restrict bit_map_inf, const int lt, const int gt){

   int i = get_global_id(0) ;
   const int send = nels + sstart - 1 ; 

    while(i < nels){
        const float v = in[i + sstart] ;

        if(v < pivot_value){
            const int idx_out = sstart + bit_map_inf[i] ; 
            out[idx_out] =  v ; 
        }

        if(v > pivot_value){
            const int idx_out = bit_map_sup[i]  + send - gt + 1 ; 
            out[idx_out] = v ;   
        }

        i+=get_global_size(0) ; 
    }

    if(get_group_id(0) == 0 && get_local_id(0) == 0){

    #pragma unroll
        for(int j = sstart + lt ; j < send - gt + 1; j++){
            out[j]= pivot_value ; 
        }
    }   
}

kernel void partition_copy(const int nels, const int sstart, global float* restrict in, global float* restrict out){

    int i =  get_global_id(0) ; 

    #pragma unroll
    while(i < nels){
        float v = out[i + sstart] ; 
        in[i + sstart] = v ; 
        i+=get_global_size(0) ; 
    }  
}

kernel void partition_copy_vect_4(const int nels, const int sstart, global float* restrict in, global float4* restrict out){

    int i =  get_global_id(0) ; 

    const int send = nels + sstart - 1; 
    const int left_offset = ((sstart/4)*4) ; 
    const int right_offset = (((send +1)/4)*4 == send + 1) ? send : ((send + 4)/4)*4 - 1 ; 
    const int nquarts  = (right_offset - left_offset + 1)/4 ; 

    while(i < nquarts){
        float4 v = out[i + left_offset/4] ;
        float s[4] = {v.s0, v.s1, v.s2, v.s3} ; 

        const int start_offset = (i == 0) ? sstart - left_offset : 0 ; 
        const int end_offset = (i == nquarts - 1) ? 4 - (right_offset - send) : 4 ; 

        #pragma unroll
        for(int t = start_offset ; t < end_offset ; t++){
            const int idx = i*4 + t - (sstart - left_offset) ; 
            if(idx < 0) printf("err") ; 
            in[idx + sstart] = s[t] ;
        } 
        i+=get_global_size(0) ; 
    }  
}

kernel void quicksort_lmem4(const int nsequences, global float* restrict in, global const int* restrict sstart_arr, global const int* restrict send_arr,
    local int* bit_array_inf, local int* bit_array_sup){

        const int li = get_local_id(0) ;
        int gi = get_group_id(0) ; 
        const int ls = get_local_size(0) ; 
        const int num_work_groups = get_num_groups(0) ;


        local int next_sstart ;
        local int next_send ; 
        local float next_pivot ; 

        local int queue_sstart[QUEUE_SIZE] ; 
        local int queue_send[QUEUE_SIZE] ;

        private float v[4] = {0} ; 
        private int acc4_sup[4] = {0};
        private int acc4_inf[4] = {0};
        private int exclusive_sup[4] = {0};
        private int exclusive_inf[4] = {0};    


        while(gi < nsequences){
            int curr_sequence = 0 ;
            int last_sequence_to_process = 1 ;  

            barrier(CLK_LOCAL_MEM_FENCE) ; 

            if(li == 0){
                queue_sstart[0] = sstart_arr[gi] ; 
                queue_send[0] = send_arr[gi] ;
                next_sstart = 0 ;  
            }

            barrier(CLK_LOCAL_MEM_FENCE) ; 

            while(next_sstart != -1){

                barrier(CLK_LOCAL_MEM_FENCE) ; 

                if(li == 0){
                    next_sstart = queue_sstart[curr_sequence] ;
                    next_send = queue_send[curr_sequence] ; 
                    next_pivot = in[next_sstart] ; 
                }

                barrier(CLK_LOCAL_MEM_FENCE) ; 

                sequence current_sequence ;

                current_sequence.sstart = next_sstart ; 
                current_sequence.send = next_send ; 
                current_sequence.pivot_value = next_pivot ;  

                #pragma unroll 
                for(int j = 0 ; j < 4 ; j++){
                    if(current_sequence.sstart + li + j*ls <= current_sequence.send){
                        v[j] = in[current_sequence.sstart + li + j*ls] ;
                        if(v[j] < current_sequence.pivot_value){
                            acc4_sup[j] = 0 ; 
                            acc4_inf[j] = 1 ; 
                        } 
                        else if(v[j] > current_sequence.pivot_value){
                            acc4_sup[j] = 1 ; 
                            acc4_inf[j] = 0 ; 
                        }
                        else{
                            acc4_sup[j] = 0 ; 
                            acc4_inf[j] = 0 ; 
                        }
                    }
                    else{
                        acc4_sup[j] = 0 ; 
                        acc4_inf[j] = 0 ; 
                    } 
                }

                int acc_sup = 0 ; 
                int acc_inf = 0 ; 

                for(int j = 0 ; j < 4 ; j++){
                    int curr_sup = acc4_sup[j] ; 
                    int curr_inf = acc4_inf[j] ;
                
                    acc_sup+= curr_sup ; 
                    acc_inf+= curr_inf ; 

                    acc4_sup[j] = acc_sup ; 
                    acc4_inf[j] = acc_inf ; 

                    exclusive_inf[j] = curr_inf ; 
                    exclusive_sup[j] = curr_sup ;
                }

                bit_array_sup[li] = acc4_sup[3] ; 
                bit_array_inf[li] = acc4_inf[3] ;

                int div = 1 ; 
                int curr_idx = li ; 

                while(div < get_local_size(0)){
                    int offset = div - 1 ; 
                    int next_idx = curr_idx/2 ;
                    barrier(CLK_LOCAL_MEM_FENCE) ;  
                    if(curr_idx & 1){
                        acc_sup += bit_array_sup[next_idx*2*div + offset] ; 
                        acc_inf += bit_array_inf[next_idx*2*div + offset] ; 
                        bit_array_inf[li] = acc_inf ; 
                        bit_array_sup[li] = acc_sup ; 
                    } 
                    curr_idx = next_idx ;
                    div*=2 ;  
                }        

                barrier(CLK_LOCAL_MEM_FENCE) ; 

                const int sum_lt = bit_array_inf[get_local_size(0) - 1] ;
                const int sum_gt = bit_array_sup[get_local_size(0) - 1] ;

                if(current_sequence.sstart + li <= current_sequence.send){
                    const int local_tail_inf = (li == 0)? 0 : bit_array_inf[li - 1] ; 
                    const int local_tail_sup = (li == 0)? 0 : bit_array_sup[li - 1] ;

                    #pragma unroll
                    for(int j = 0 ; j < 4 ; j++){
                        acc4_sup[j]+=local_tail_sup - exclusive_sup[j] ;  
                        acc4_inf[j]+=local_tail_inf - exclusive_inf[j] ;  
                    }
                }

                #pragma unroll
                for(int j = 0 ; j < 4 ; j++){
                    if(current_sequence.sstart + li + ls*j<= current_sequence.send){
                        if(v[j] < current_sequence.pivot_value){
                            const int idx = acc4_inf[j] + current_sequence.sstart ; 
                            in[idx] = v[j] ; 
                        }
                        else if(v[j] > current_sequence.pivot_value){
                            const int idx = acc4_sup[j] + current_sequence.send - sum_gt + 1 ;
                            in[idx] = v[j] ; 
                        }
                    }
                    else{
                        break ; 
                    }
                }
                if(li == 0){
                    for(int j = current_sequence.sstart + sum_lt ; j < current_sequence.send - sum_gt + 1 ; j++){
                        in[j] = current_sequence.pivot_value ; 
                    }

                    if(sum_lt >= 2){  
                        queue_sstart[last_sequence_to_process] = current_sequence.sstart ; 
                        queue_send[last_sequence_to_process] = current_sequence.sstart +  sum_lt - 1 ; 
                        last_sequence_to_process = (last_sequence_to_process + 1)%QUEUE_SIZE ;
                    }

                    if(sum_gt >= 2){
                        queue_sstart[last_sequence_to_process] = current_sequence.send - sum_gt + 1 ; 
                        queue_send[last_sequence_to_process] = current_sequence.send ; 
                        last_sequence_to_process = (last_sequence_to_process + 1)%QUEUE_SIZE ;   
                    }
                    curr_sequence = (curr_sequence + 1)%QUEUE_SIZE ; 

                    if(curr_sequence == last_sequence_to_process){
                        next_sstart = -1 ; 
                    }
                }
               
                barrier(CLK_LOCAL_MEM_FENCE) ; 
            }
            gi+=num_work_groups ; 
        }
    }        