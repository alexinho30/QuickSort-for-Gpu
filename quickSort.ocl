kernel void split_elements(const int nels, const int sstart, global const float4 * restrict in,  
const float pivot, global int * restrict lt, global int * restrict gt,  
global int* bit_array_sup, global int* bit_array_inf,
local int * restrict arr_inf, local int* restrict arr_sup
){
    const int li = get_local_id(0) ; 
    const int gi = get_group_id(0) ;
    const int gs = get_global_size(0) ; 
    int i = get_global_id(0) ;

    const int send = nels + sstart - 1; 
    const int left_offset = sstart%4 ;
    const int right_offset = ((send + 3)/4)*4 - (send - 1);   
    int nquarts  = (nels + right_offset + left_offset + 3)/4 ;   

    int v_sup = 0 ;
    int v_inf = 0 ;
    float s[4] ; 

    while(i < nquarts){
        float4 v = in[sstart/4 + i] ;

        float s[4] = {v.s0, v.s1, v.s2, v.s3} ; 

        for(int t = 0; t < 4 ; t++){

            const int idx = i*4 + t - left_offset;

            if(s[t] < pivot  && idx < nels && idx >= 0){
                v_inf++ ;  
                bit_array_inf[idx] = 1 ;  
                bit_array_sup[idx] = 0 ;  
            }

            else if(s[t] > pivot && idx < nels && idx >= 0){
                v_sup++ ;  
                bit_array_sup[idx] = 1 ;
                bit_array_inf[idx] = 0 ;  
            } 
            else{
                bit_array_sup[idx] = 0 ; 
                bit_array_inf[idx] = 0 ;  
            }
        }


        i += gs ;
    }

    arr_sup[li] = v_sup ; 
    arr_inf[li] = v_inf ; 

    int active = get_local_size(0)/2 ; 
    
    while(active > 0){
        barrier(CLK_LOCAL_MEM_FENCE);
        if(li < active){
            v_sup += arr_sup[li + active] ; 
            v_inf += arr_inf[li + active] ; 
            arr_sup[li] = v_sup ; 
            arr_inf[li] = v_inf ; 
        }
        active/=2 ; 
    }

    if(li == 0){
        lt[gi] = v_inf ; 
        gt[gi] = v_sup ; 
    }
}

kernel void scan(const int nels, global int4* restrict bit_map_sup, global int4* restrict bit_map_inf, 
global int* restrict tails_inf, global int* restrict tails_sup, local int* restrict lmem_sup, local int* lmem_inf){

    const int nquarts = nels/4 ; 
    const int gi = get_group_id(0) ; 
    const int nquarts_nwg = (nquarts + get_num_groups(0) - 1)/get_num_groups(0) ;
    const int li = get_local_id(0) ; 

    int start = gi*nquarts_nwg ;
    int tail_inf = 0, tail_sup = 0 ;  
    const int end = min(start + nquarts_nwg, nquarts) ; 

    while(start < end){
        barrier(CLK_LOCAL_MEM_FENCE) ; 

        int4 acc4_sup = (int4)0 ;
        int4 acc4_inf = (int4)0 ;  

        int i = start + li ; 

        int4 exclusive_sup = (int4)0; 
        int4 exclusive_inf = (int4)0; 

        if(i < end){
            acc4_sup = bit_map_sup[i] ;
            acc4_inf = bit_map_inf[i] ; 

            exclusive_inf = acc4_inf ; 
            exclusive_sup = acc4_sup ;

            acc4_sup.odd += acc4_sup.even ; 
            acc4_inf.odd += acc4_inf.even ; 

            acc4_sup.hi += acc4_sup.s1 ; 
            acc4_inf.hi += acc4_inf.s1 ; 
        }

        int acc_inf = acc4_inf.s3 ; 
        int acc_sup = acc4_sup.s3 ; 

        lmem_inf[li] = acc_inf ;
        lmem_sup[li] = acc_sup ; 

        int div = 1 ; 
        int curr_idx = li ; 

        while(div < get_local_size(0)){
            int offset = div - 1 ; 
            int next_idx = curr_idx/2 ;
            barrier(CLK_LOCAL_MEM_FENCE) ;  
            if(curr_idx & 1){
                acc_sup += lmem_sup[next_idx*2*div + offset] ; 
                acc_inf += lmem_inf[next_idx*2*div + offset] ; 
                lmem_inf[li] = acc_inf ; 
                lmem_sup[li] = acc_sup ; 
            } 
            curr_idx = next_idx ;
            div*=2 ;  
        }        

        barrier(CLK_LOCAL_MEM_FENCE) ; 

        if(i < end){
            const int local_tail_inf = (li == 0)? 0 : lmem_inf[li - 1] ; 
            const int local_tail_sup = (li == 0)? 0 : lmem_sup[li - 1] ;

            if(tails_inf != bit_map_inf){
                bit_map_inf[i] = acc4_inf + tail_inf + local_tail_inf - exclusive_inf; 
                bit_map_sup[i] = acc4_sup + tail_sup + local_tail_sup - exclusive_sup;
            }
            else{
                bit_map_inf[i] = acc4_inf + tail_inf + local_tail_inf ; 
                bit_map_sup[i] =  acc4_sup + tail_sup + local_tail_sup ;
            }
        }

        start+=get_local_size(0) ; 

        barrier(CLK_LOCAL_MEM_FENCE) ; 
        tail_inf += lmem_inf[get_local_size(0) - 1] ; 
        tail_sup += lmem_sup[get_local_size(0) - 1] ; 
    }

    if(li == 0 && tails_inf != bit_map_inf){
        tails_inf[gi] = tail_inf ; 
        tails_sup[gi] = tail_sup ;   
    }
}



kernel void scan_update(const int nels, global int4* restrict bit_map_sup, global int4* restrict bit_map_inf, 
global int* restrict tails_sup, global int* restrict tails_inf){

    const int nquarts = nels/4 ; 

    const int nwg = get_num_groups(0) + 1 ; 
    const int nquarts_nwg = (nquarts + nwg - 1)/nwg ; 
    const int start = (get_group_id(0) + 1)*nquarts_nwg ; 
    const int end = min(start + nquarts_nwg, nquarts) ; 
    const int gi = get_group_id(0) ; 

    const int corr_sup = tails_sup[gi] ; 
    const int corr_inf = tails_inf[gi] ; 

    const int li = get_local_id(0) ; 

    for(int j=start + li; j < end ; j+=get_local_size(0)){
        bit_map_sup[j] += corr_sup ; 
        bit_map_inf[j] += corr_inf ; 
    } 
}

/*kernel void partition(const int nels, const sequence seq, global const float* restrict in, global float* restrict out, 
global const int* restrict bit_map_sup, global const int* restrict bit_map_inf, const int lt, const int gt){

    int i = get_global_id(0) ; 

    while(i < nels){
        const float v = in[i] ; 
        if(i >= seq.sstart && i <=seq.send){

            if(v < seq.pivot_value){
                const int idx_out = seq.sstart + bit_map_inf[i - seq.sstart] ; 
                out[idx_out] =  v ;
            }

            if(v > seq.pivot_value){
                const int idx_out = bit_map_sup[i - seq.sstart]  + seq.send - gt + 1 ; 
                out[idx_out] = v ; 
            }
        }
        else{
            out[i] = v; 
        }

        i+=get_global_size(0) ; 
    }

    barrier(CLK_LOCAL_MEM_FENCE) ; 

    if(get_group_id(0) == 0 && get_local_id(0) == 0){
        for(int j = seq.sstart + lt ; j < seq.send - gt + 1; j++){
            out[j]= seq.pivot_value ; 
        }
    }
}
*/

kernel void partition_buff_tmp(const int nels, const int sstart, const float pivot_value, global float* restrict in, global float* restrict out, 
global const int* restrict bit_map_sup, global const int* restrict bit_map_inf, const int lt, const int gt){

   int i = get_global_id(0) ;
   const int send = nels + sstart - 1 ; 

    while(i < nels){
        const float v = in[i + sstart] ;

        if(v < pivot_value){
            const int idx_out = sstart + bit_map_inf[i] ; 
            out[idx_out] =  v ; 
        }

        if(v > pivot_value){
            const int idx_out = bit_map_sup[i]  + send - gt + 1 ; 
            out[idx_out] = v ;   
        }

        i+=get_global_size(0) ; 
    }

    if(get_group_id(0) == 0 && get_local_id(0) == 0){
        for(int j = sstart + lt ; j < send - gt + 1; j++){
            out[j]= pivot_value ; 
        }
    }   
}

kernel void partition_copy(const int nels, const int sstart, global float* restrict in, global float4* restrict out, 
                            const int lt, const int gt){

    int i =  get_global_id(0) ; 

    const int send = nels + sstart - 1; 
    const int left_offset = sstart%4 ;
    const int right_offset = ((send + 3)/4)*4 - (send - 1);   
    int nquarts  = (nels + right_offset + left_offset + 3)/4 ;

    while(i < nquarts){
        float4 v = out[i + sstart/4] ;
        float s[4] = {v.s0, v.s1, v.s2, v.s3} ; 
        for(int t = 0 ; t < 4 ; t++){
            const int idx = i*4 + t - left_offset;
            if(idx < nels  && idx >= 0)  
            in[idx + sstart] = s[t] ;
        } 
        i+=get_global_size(0) ; 
    }  

}
